#!/bin/bash

RED='\033[0;31m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color
PICNIC_IMG="mfschmidt/picnic:latest"

# Provide usage instructions
function usage {
  echo "Usage for run_picnic_in_docker"
  echo ""
  echo "    You can 'run_picnic_in_docker --help' for usage, or"
  echo ""
  echo "    run_picnic_in_docker /input/input_deck.inp /host/path/to/input_path /host/path/to/output_path /opt/freesurfer/license.txt"
  echo ""
  echo "'input_deck'  The text file (as mounted on host) specifying"
  echo "              the pipeline to run. This is usually named *.inp"
  echo "              You can create an input deck with PICNIC's pantry.py GUI."
  echo "              Paths in the input deck must be edited to match"
  echo "              the docker volume mounts. This argument should be specified "
  echo "              as the path visible from the host, but the paths in the "
  echo "              input deck should reflect paths inside the docker container, "
  echo "              probably starting with /input/ or /output/."
  echo ""
  echo "'input_path'  The path (as mounted on host) to your input data"
  echo "              This will be safely mounted read-only."
  echo "              Paths in the input deck should be downstream from this input_path,"
  echo "              and docker will use this path to match its volume mounts."
  echo "              If a participant's input data are at /home/username/pet_data/sub-01,"
  echo "              you would use /home/username/pet_data as your input_path, "
  echo "              then specify /input/sub-01/... inside input_deck.inp."
  echo ""
  echo "'output_path' The path (as mounted on host) where PICNIC will write results"
  echo "              See input_path for how to structure host vs docker paths."
  echo "              This should obviously be writable."
  echo ""
  echo "'freesurfer_license' The path (as mounted on host) where your freesurfer"
  echo "              license can be found. If it is not provided, this script "
  echo "              will try to find it in common places."
  echo "              This can be obtained from the FreeSurfer group at"
  echo "              https://surfer.nmr.mgh.harvard.edu/registration.html"
  echo ""
}

# Handle completely naive or errant input
if [[ -z "${1}" ]]; then
  echo -e "${RED}"
  echo "No arguments were provided. You can build one with 'pantry.py'."
  echo -e "${NC}"
  usage
  exit 1
elif [[ ${1} == *"help" ]]; then
  usage
  exit 1
fi

# Handle actual input
ERRORS="FALSE"

# Arg 1 is the input deck file
if [[ -f "${1}" ]]; then
  echo "Loading input deck from ${1}"
  INPUT_DECK="${1}"
elif [[ -e "${1}" ]]; then
  echo -e "${RED}"
  echo "'${1}' is not an input deck; it's a directory."
  echo -e "${NC}"
  ERRORS="TRUE"
else
  echo -e "${RED}"
  echo "Input deck '${1}' does not exist."
  echo -e "${NC}"
  ERRORS="TRUE"
fi

# Arg 2 is the input path, required for mounting volumes properly
if [[ -z "${2}" ]]; then
  echo -e "${RED}"
  echo "No input path was provided. What path should docker mount for reading?"
  echo -e "${NC}"
  usage
  exit 1
elif [[ -e "${2}" ]]; then
  INPUT_DIR="${2}"
else
  echo -e "${RED}"
  echo "Input path '${2}' does not exist"
  echo -e "${NC}"
  ERRORS="TRUE"
fi

# Arg 3 is the output path
if [[ -z "${3}" ]]; then
  OUTPUT_DIR=$(pwd)
elif [[ -e "${3}" ]]; then
  OUTPUT_DIR="${3}"
else
  echo -e "${RED}"
  echo "Output path '${3}' does not exist"
  echo -e "${NC}"
  ERRORS="TRUE"
fi

# Arg 4 is the freesurfer license file
for FS_LICENSE in \
"${4}" \
"/opt/freesurfer/license.txt" \
"/usr/local/freesurfer/license.txt" \
"/data/freesurfer/license.txt" \
"${HOME}/freesurfer/license.txt" \
"/minddata/home_on_aws/mschmid/freesurfer/license.txt"; do
  if [[ -f "$FS_LICENSE" ]]; then
    break
  fi
done
if [[ ! -f "$FS_LICENSE" ]]; then
  echo -e "${RED}"
  echo "No FreeSurfer license could be found. Please edit this script to help locate it."
  echo -e "${NC}"
  ERRORS="TRUE"
fi

# If we encountered command errors, bail out rather than run.
if [[ "$ERRORS" == "TRUE" ]]; then
  exit 1
fi

echo "Running from '${INPUT_DIR}' to '${OUTPUT_DIR}', "
echo "  guided by '${INPUT_DECK}'"
echo "  using FreeSurfer license at '${FS_LICENSE}'."

# Execute the input deck in docker
HOST_NAME=$(hostname)
export HOST_NAME
HOST_UID=$(id -u)
HOST_GID=$(id -g)
docker run -it \
  --env "HOST_NAME" \
  --user "${HOST_UID}:${HOST_GID}" \
  --mount "type=bind,\"src=${HOME}\",\"dst=${HOME}\"" \
  --mount "type=bind,\"src=/etc/group\",\"dst=/etc/group\",ro" \
  --mount "type=bind,\"src=/etc/passwd\",\"dst=/etc/passwd\",ro" \
  --mount "type=bind,\"src=/etc/shadow\",\"dst=/etc/shadow\",ro" \
  --mount "type=bind,\"src=${INPUT_DIR}\",\"dst=/input\",ro" \
  --mount "type=bind,\"src=${OUTPUT_DIR}\",\"dst=/output\"" \
  --mount "type=bind,\"src=${INPUT_DECK}\",\"dst=/input_deck.inp\"" \
  --mount "type=bind,\"src=${FS_LICENSE}\",\"dst=/opt/freesurfer/license.txt\",ro" \
  ${PICNIC_IMG} /input_deck.inp
